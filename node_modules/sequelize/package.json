{
  "name": "sequelize",
  "description": "Multi dialect ORM for Node.JS",
  "version": "1.5.0",
  "author": {
    "name": "Sascha Depold",
    "email": "sascha@depold.com"
  },
  "contributors": [
    {
      "name": "Sascha Depold",
      "email": "sascha@depold.com"
    },
    {
      "name": "Meg Sharkey",
      "email": "meg@metamarkets.com"
    },
    {
      "name": "Chase Geigle",
      "email": "sky@skytrife.com"
    },
    {
      "name": "Jan Aagaard Meier",
      "email": "jam@innofluence.com",
      "url": "Innofluence"
    }
  ],
  "dependencies": {
    "mysql": "0.9.x",
    "underscore": "1.2.x",
    "underscore.string": "2.0.x",
    "lingo": "0.0.x",
    "validator": "0.3.x",
    "moment": "1.1.x",
    "commander": "~0.6.0",
    "generic-pool": "1.0.9"
  },
  "devDependencies": {
    "jasmine-node": "1.0.17",
    "sqlite3": "~2.1.5",
    "pg": "0.6.x",
    "buster": "~0.6.0"
  },
  "keywords": [
    "mysql",
    "orm",
    "nodejs",
    "object relational mapper"
  ],
  "main": "index",
  "scripts": {
    "test": "npm run test-jasmine && npm run test-buster",
    "test-jasmine": "./node_modules/.bin/jasmine-node spec-jasmine/",
    "test-buster": "./node_modules/.bin/buster-test"
  },
  "bin": {
    "sequelize": "bin/sequelize"
  },
  "engines": {
    "node": ">=0.4.6"
  },
  "license": "MIT",
  "readme": "# Sequelize #\n\nThe Sequelize library provides easy access to MySQL, SQLite or PostgreSQL databases by mapping database entries to objects and vice versa. To put it in a nutshell... it's an ORM (Object-Relational-Mapper). The library is written entirely in JavaScript and can be used in the Node.JS environment.\n\n## Blogposts/Changes ##\n- [v1.4.1](http://blog.sequelizejs.com/post/24403298792/changes-in-sequelize-1-4-1): deprecation of node < 0.6, logging customization, ...\n- [v1.4.0](http://blog.sequelizejs.com/post/24345409723/changes-in-sequelize-1-4-0): postgresql, connection pooling, ...\n- [v1.3.0](http://blog.depold.com/post/15283366633/changes-in-sequelize-1-3-0): migrations, cross-database, validations, new listener notation, ...\n- [v1.2.1](http://blog.depold.com/post/12319530694/changes-in-sequelize-1-2-1): changes some defaults and some interfaces\n- [v1.0.0](http://blog.depold.com/post/5936116582/changes-in-sequelize-1-0-0): complete rewrite\n\n## Features ##\n\n- Schema definition\n- Schema synchronization/dropping\n- Easy definition of class/instance methods\n- Instance saving/updating/dropping\n- Asynchronous library\n- Associations\n- Importing definitions from single files\n\n## Documentation, Examples and Updates ##\n\nYou can find the documentation and announcements of updates on the [project's website](http://www.sequelizejs.com).\nIf you want to know about latest development and releases, follow me on [Twitter](http://twitter.com/sdepold).\nAlso make sure to take a look at the examples in the repository. The website will contain them soon, as well.\n\n- [Documentation](http://www.sequelizejs.com)\n- [Twitter](http://twitter.com/sdepold)\n- [IRC](irc://irc.freenode.net/sequelizejs)\n- [XING](https://www.xing.com/net/priec1b5cx/sequelize)\n\n## Collaboration ##\n\nI'm glad to get pull request if any functionality is missing or something is buggy. But _please_ ... run the tests before you send me the pull request.\n\nNow if you want to contribute but don't really know where to begin\ndon't worry, the steps below will guide you to have a sequelize\ncontributor's environment running in a couple minutes.\n\n### 1. Prepare the environment ###\n\nAll the following steps consider you already have [npm](http://npmjs.org/) installed in your [node.js version 0.4.6 or higher](https://github.com/sdepold/sequelize/blob/master/package.json#L30)\n\n#### 1.1 MySQL and other external dependencies ####\n\nContributing to sequelize requires you to have\n[MySQL](http://www.mysql.com/) up and running in your local\nenvironment. The reason for that is that we have test cases that runs\nagainst an actual MySQL server and make sure everything is always\nworking. \n\nThat is also one of the reasons your features must come with tests:\nlet's make sure sequelize will stay awesome as more features are added\nas well as that fixed bugs will never come back.\n\nWell, after installing **MySQL** you also need to create the sequelize test database:\n\n```console\n$ echo \"CREATE DATABASE sequelize_test;\" | mysql -uroot\n```\n\n**CLEVER NOTE:** your local MySQL install must be with username `root`\n  without password. If you want to customize that just hack in the\n  tests, but make sure to don't commit your credentials, we don't want\n  to expose your personal data in sequelize codebase ;)\n\n**AND ONE LAST THING:** Sequelize also supports SQLite. So this should be working\non your machine as well :)\n\n### 2. Install the dependencies ###\n\nJust \"cd\" into sequelize directory and run `npm install`, see an example below:\n\n```console\n$ cd path/to/sequelize\n$ npm install\n```\n\n### 3. Run the tests ###\n\nIn order to run the tests you got to run `jasmine-node` against the `spec` directory.\nBy the way, [there](https://github.com/sdepold/sequelize/tree/master/spec) is where\nyou will write new tests if that's the case.\n\nAll you need is to run `./node_modules/.bin/jasmine-node spec/`,\nalthough this is kinda long and boring, so we configures a NPM task\nand made that less laborious to you :)\n\n```console\n$ npm test\n```\n\n### 4. That's all ###\n\nJust commit and send pull requests.\n\nHappy hacking and thank you for contributing\n\n# Build status\n\nThe automated tests we talk about just so much are running on\n[Travis public CI](http://travis-ci.org), here is its status:\n\n[![Build Status](https://secure.travis-ci.org/sdepold/sequelize.png)](http://travis-ci.org/sdepold/sequelize)\n",
  "_id": "sequelize@1.5.0",
  "_from": "sequelize@1.5.0"
}
